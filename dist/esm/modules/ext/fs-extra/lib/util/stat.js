import{__exports as t}from"../../../../_virtual/index2.js";import"../../../universalify/index.js";import{__exports as r}from"../../../../_virtual/index.js";import"../fs/index.js";import e from"path";const o=r,n=e,i=t.fromPromise;function s(t,r){return r.ino&&r.dev&&r.ino===t.ino&&r.dev===t.dev}function a(t,r){const e=n.resolve(t).split(n.sep).filter((t=>t)),o=n.resolve(r).split(n.sep).filter((t=>t));return e.every(((t,r)=>o[r]===t))}function c(t,r,e){return`Cannot ${e} '${t}' to a subdirectory of itself, '${r}'.`}var d={checkPaths:i((async function(t,r,e,i){const{srcStat:d,destStat:f}=await function(t,r,e){const n=e.dereference?t=>o.stat(t,{bigint:!0}):t=>o.lstat(t,{bigint:!0});return Promise.all([n(t),n(r).catch((t=>{if("ENOENT"===t.code)return null;throw t}))]).then((([t,r])=>({srcStat:t,destStat:r})))}(t,r,i);if(f){if(s(d,f)){const o=n.basename(t),i=n.basename(r);if("move"===e&&o!==i&&o.toLowerCase()===i.toLowerCase())return{srcStat:d,destStat:f,isChangingCase:!0};throw new Error("Source and destination must not be the same.")}if(d.isDirectory()&&!f.isDirectory())throw new Error(`Cannot overwrite non-directory '${r}' with directory '${t}'.`);if(!d.isDirectory()&&f.isDirectory())throw new Error(`Cannot overwrite directory '${r}' with non-directory '${t}'.`)}if(d.isDirectory()&&a(t,r))throw new Error(c(t,r,e));return{srcStat:d,destStat:f}})),checkPathsSync:function(t,r,e,i){const{srcStat:d,destStat:f}=function(t,r,e){let n;const i=e.dereference?t=>o.statSync(t,{bigint:!0}):t=>o.lstatSync(t,{bigint:!0}),s=i(t);try{n=i(r)}catch(t){if("ENOENT"===t.code)return{srcStat:s,destStat:null};throw t}return{srcStat:s,destStat:n}}(t,r,i);if(f){if(s(d,f)){const o=n.basename(t),i=n.basename(r);if("move"===e&&o!==i&&o.toLowerCase()===i.toLowerCase())return{srcStat:d,destStat:f,isChangingCase:!0};throw new Error("Source and destination must not be the same.")}if(d.isDirectory()&&!f.isDirectory())throw new Error(`Cannot overwrite non-directory '${r}' with directory '${t}'.`);if(!d.isDirectory()&&f.isDirectory())throw new Error(`Cannot overwrite directory '${r}' with non-directory '${t}'.`)}if(d.isDirectory()&&a(t,r))throw new Error(c(t,r,e));return{srcStat:d,destStat:f}},checkParentPaths:i((async function t(r,e,i,a){const d=n.resolve(n.dirname(r)),f=n.resolve(n.dirname(i));if(f===d||f===n.parse(f).root)return;let w;try{w=await o.stat(f,{bigint:!0})}catch(t){if("ENOENT"===t.code)return;throw t}if(s(e,w))throw new Error(c(r,i,a));return t(r,e,f,a)})),checkParentPathsSync:function t(r,e,i,a){const d=n.resolve(n.dirname(r)),f=n.resolve(n.dirname(i));if(f===d||f===n.parse(f).root)return;let w;try{w=o.statSync(f,{bigint:!0})}catch(t){if("ENOENT"===t.code)return;throw t}if(s(e,w))throw new Error(c(r,i,a));return t(r,e,f,a)},isSrcSubdir:a,areIdentical:s};export{d as s};
