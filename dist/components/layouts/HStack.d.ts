/// <reference types="trusted-types" />
import React, { HTMLAttributes, CSSProperties, ReactNode } from 'react';
interface PropsType extends HTMLAttributes<HTMLElement> {
    id?: string;
    /**
     * 컴포넌트 클래스명
     */
    className?: string;
    /**
     * 컴포넌트 태그
     */
    tag?: 'div' | 'section' | 'article' | 'header' | 'footer' | 'main' | 'aside' | 'nav';
    /**
     * flex의 justify-content
     */
    justifyContent?: CSSProperties['justifyContent'];
    /**
     * flex의 justify-items
     */
    justifyItems?: CSSProperties['justifyItems'];
    /**
     * flex의 justify-self
     */
    justifySelf?: CSSProperties['justifySelf'];
    /**
     * flex의 align-items
     */
    alignItems?: CSSProperties['alignItems'];
    /**
     * flex의 align-self
     */
    alignSelf?: CSSProperties['alignSelf'];
    /**
     * flex의 align-content
     */
    alignContent?: CSSProperties['alignContent'];
    /**
     * inline-flex 레이아웃 여부
     */
    inline?: boolean;
    /**
     * 컴포넌트 스타일
     */
    style?: Omit<CSSProperties, 'columnGap' | 'rowGap'>;
    /**
     * flex의 column-gap
     */
    columnGap?: CSSProperties['columnGap'];
    /**
     * flex의 row-gap
     */
    rowGap?: CSSProperties['rowGap'];
    /**
     * flex의 gap
     */
    gap?: CSSProperties['gap'];
    /**
     * 컴포넌트 자식 노드
     */
    children: ReactNode;
}
/**
 * `HStack`은 display: flex; 형태의 수평 스택 컴포넌트 입니다.
 *
 * @param {string} [props.className] - 컴포넌트 클래스명
 * @param {string} [props.tag='div' | 'section' | 'article' | 'header' | 'footer' | 'main' | 'aside' | 'nav'] - 컴포넌트 태그
 * @param {CSSProperties['justifyContent']} [props.justifyContent] - flex의 justify-content
 * @param {CSSProperties['justifyItems']} [props.justifyItems] - flex의 justify-items
 * @param {CSSProperties['justifySelf']} [props.justifySelf] - flex의 justify-self
 * @param {CSSProperties['alignItems']} [props.alignItems] - flex의 align-items
 * @param {CSSProperties['alignSelf']} [props.alignSelf] - flex의 align-self
 * @param {CSSProperties['alignContent']} [props.alignContent] - flex의 align-content
 * @param {boolean} [props.inline] - inline-flex 레이아웃 여부
 * @param {CSSProperties} [props.style] - 컴포넌트 스타일
 * @param {CSSProperties['columnGap']} [props.columnGap] - flex의 column-gap
 * @param {CSSProperties['rowGap']} [props.rowGap] - flex의 row-gap
 * @param {CSSProperties['gap']} [props.gap] - flex의 gap
 * @param {ReactNode} [props.children] - 컴포넌트 자식 노드
 * @returns 수평 스택 컴포넌트
 */
declare const HStack: ({ id, className, inline, justifyContent, justifyItems, justifySelf, alignItems, alignSelf, alignContent, columnGap, rowGap, gap, style, children, tag, ...rest }: PropsType) => React.DetailedReactHTMLElement<{
    id: string;
    className: string;
    style: {
        gap: import("csstype").Property.Gap<string | number>;
        columnGap: import("csstype").Property.ColumnGap<string | number>;
        rowGap: import("csstype").Property.RowGap<string | number>;
        accentColor?: import("csstype").Property.AccentColor;
        alignContent?: import("csstype").Property.AlignContent;
        alignItems?: import("csstype").Property.AlignItems;
        alignSelf?: import("csstype").Property.AlignSelf;
        alignTracks?: import("csstype").Property.AlignTracks;
        animationComposition?: import("csstype").Property.AnimationComposition;
        animationDelay?: import("csstype").Property.AnimationDelay<string & {}>;
        animationDirection?: import("csstype").Property.AnimationDirection;
        animationDuration?: import("csstype").Property.AnimationDuration<string & {}>;
        animationFillMode?: import("csstype").Property.AnimationFillMode;
        animationIterationCount?: import("csstype").Property.AnimationIterationCount;
        animationName?: import("csstype").Property.AnimationName;
        animationPlayState?: import("csstype").Property.AnimationPlayState;
        animationRangeEnd?: import("csstype").Property.AnimationRangeEnd<string | number>;
        animationRangeStart?: import("csstype").Property.AnimationRangeStart<string | number>;
        animationTimeline?: import("csstype").Property.AnimationTimeline;
        animationTimingFunction?: import("csstype").Property.AnimationTimingFunction;
        appearance?: import("csstype").Property.Appearance;
        aspectRatio?: import("csstype").Property.AspectRatio;
        backdropFilter?: import("csstype").Property.BackdropFilter;
        backfaceVisibility?: import("csstype").Property.BackfaceVisibility;
        backgroundAttachment?: import("csstype").Property.BackgroundAttachment;
        backgroundBlendMode?: import("csstype").Property.BackgroundBlendMode;
        backgroundClip?: import("csstype").Property.BackgroundClip;
        backgroundColor?: import("csstype").Property.BackgroundColor;
        backgroundImage?: import("csstype").Property.BackgroundImage;
        backgroundOrigin?: import("csstype").Property.BackgroundOrigin;
        backgroundPositionX?: import("csstype").Property.BackgroundPositionX<string | number>;
        backgroundPositionY?: import("csstype").Property.BackgroundPositionY<string | number>;
        backgroundRepeat?: import("csstype").Property.BackgroundRepeat;
        backgroundSize?: import("csstype").Property.BackgroundSize<string | number>;
        blockOverflow?: import("csstype").Property.BlockOverflow;
        blockSize?: import("csstype").Property.BlockSize<string | number>;
        borderBlockColor?: import("csstype").Property.BorderBlockColor;
        borderBlockEndColor?: import("csstype").Property.BorderBlockEndColor;
        borderBlockEndStyle?: import("csstype").Property.BorderBlockEndStyle;
        borderBlockEndWidth?: import("csstype").Property.BorderBlockEndWidth<string | number>;
        borderBlockStartColor?: import("csstype").Property.BorderBlockStartColor;
        borderBlockStartStyle?: import("csstype").Property.BorderBlockStartStyle;
        borderBlockStartWidth?: import("csstype").Property.BorderBlockStartWidth<string | number>;
        borderBlockStyle?: import("csstype").Property.BorderBlockStyle;
        borderBlockWidth?: import("csstype").Property.BorderBlockWidth<string | number>;
        borderBottomColor?: import("csstype").Property.BorderBottomColor;
        borderBottomLeftRadius?: import("csstype").Property.BorderBottomLeftRadius<string | number>;
        borderBottomRightRadius?: import("csstype").Property.BorderBottomRightRadius<string | number>;
        borderBottomStyle?: import("csstype").Property.BorderBottomStyle;
        borderBottomWidth?: import("csstype").Property.BorderBottomWidth<string | number>;
        borderCollapse?: import("csstype").Property.BorderCollapse;
        borderEndEndRadius?: import("csstype").Property.BorderEndEndRadius<string | number>;
        borderEndStartRadius?: import("csstype").Property.BorderEndStartRadius<string | number>;
        borderImageOutset?: import("csstype").Property.BorderImageOutset<string | number>;
        borderImageRepeat?: import("csstype").Property.BorderImageRepeat;
        borderImageSlice?: import("csstype").Property.BorderImageSlice;
        borderImageSource?: import("csstype").Property.BorderImageSource;
        borderImageWidth?: import("csstype").Property.BorderImageWidth<string | number>;
        borderInlineColor?: import("csstype").Property.BorderInlineColor;
        borderInlineEndColor?: import("csstype").Property.BorderInlineEndColor;
        borderInlineEndStyle?: import("csstype").Property.BorderInlineEndStyle;
        borderInlineEndWidth?: import("csstype").Property.BorderInlineEndWidth<string | number>;
        borderInlineStartColor?: import("csstype").Property.BorderInlineStartColor;
        borderInlineStartStyle?: import("csstype").Property.BorderInlineStartStyle;
        borderInlineStartWidth?: import("csstype").Property.BorderInlineStartWidth<string | number>;
        borderInlineStyle?: import("csstype").Property.BorderInlineStyle;
        borderInlineWidth?: import("csstype").Property.BorderInlineWidth<string | number>;
        borderLeftColor?: import("csstype").Property.BorderLeftColor;
        borderLeftStyle?: import("csstype").Property.BorderLeftStyle;
        borderLeftWidth?: import("csstype").Property.BorderLeftWidth<string | number>;
        borderRightColor?: import("csstype").Property.BorderRightColor;
        borderRightStyle?: import("csstype").Property.BorderRightStyle;
        borderRightWidth?: import("csstype").Property.BorderRightWidth<string | number>;
        borderSpacing?: import("csstype").Property.BorderSpacing<string | number>;
        borderStartEndRadius?: import("csstype").Property.BorderStartEndRadius<string | number>;
        borderStartStartRadius?: import("csstype").Property.BorderStartStartRadius<string | number>;
        borderTopColor?: import("csstype").Property.BorderTopColor;
        borderTopLeftRadius?: import("csstype").Property.BorderTopLeftRadius<string | number>;
        borderTopRightRadius?: import("csstype").Property.BorderTopRightRadius<string | number>;
        borderTopStyle?: import("csstype").Property.BorderTopStyle;
        borderTopWidth?: import("csstype").Property.BorderTopWidth<string | number>;
        bottom?: import("csstype").Property.Bottom<string | number>;
        boxDecorationBreak?: import("csstype").Property.BoxDecorationBreak;
        boxShadow?: import("csstype").Property.BoxShadow;
        boxSizing?: import("csstype").Property.BoxSizing;
        breakAfter?: import("csstype").Property.BreakAfter;
        breakBefore?: import("csstype").Property.BreakBefore;
        breakInside?: import("csstype").Property.BreakInside;
        captionSide?: import("csstype").Property.CaptionSide;
        caretColor?: import("csstype").Property.CaretColor;
        caretShape?: import("csstype").Property.CaretShape;
        clear?: import("csstype").Property.Clear;
        clipPath?: import("csstype").Property.ClipPath;
        color?: import("csstype").Property.Color;
        colorAdjust?: import("csstype").Property.PrintColorAdjust;
        colorScheme?: import("csstype").Property.ColorScheme;
        columnCount?: import("csstype").Property.ColumnCount;
        columnFill?: import("csstype").Property.ColumnFill;
        columnRuleColor?: import("csstype").Property.ColumnRuleColor;
        columnRuleStyle?: import("csstype").Property.ColumnRuleStyle;
        columnRuleWidth?: import("csstype").Property.ColumnRuleWidth<string | number>;
        columnSpan?: import("csstype").Property.ColumnSpan;
        columnWidth?: import("csstype").Property.ColumnWidth<string | number>;
        contain?: import("csstype").Property.Contain;
        containIntrinsicBlockSize?: import("csstype").Property.ContainIntrinsicBlockSize<string | number>;
        containIntrinsicHeight?: import("csstype").Property.ContainIntrinsicHeight<string | number>;
        containIntrinsicInlineSize?: import("csstype").Property.ContainIntrinsicInlineSize<string | number>;
        containIntrinsicWidth?: import("csstype").Property.ContainIntrinsicWidth<string | number>;
        containerName?: import("csstype").Property.ContainerName;
        containerType?: import("csstype").Property.ContainerType;
        content?: import("csstype").Property.Content;
        contentVisibility?: import("csstype").Property.ContentVisibility;
        counterIncrement?: import("csstype").Property.CounterIncrement;
        counterReset?: import("csstype").Property.CounterReset;
        counterSet?: import("csstype").Property.CounterSet;
        cursor?: import("csstype").Property.Cursor;
        direction?: import("csstype").Property.Direction;
        display?: import("csstype").Property.Display;
        emptyCells?: import("csstype").Property.EmptyCells;
        filter?: import("csstype").Property.Filter;
        flexBasis?: import("csstype").Property.FlexBasis<string | number>;
        flexDirection?: import("csstype").Property.FlexDirection;
        flexGrow?: import("csstype").Property.FlexGrow;
        flexShrink?: import("csstype").Property.FlexShrink;
        flexWrap?: import("csstype").Property.FlexWrap;
        float?: import("csstype").Property.Float;
        fontFamily?: import("csstype").Property.FontFamily;
        fontFeatureSettings?: import("csstype").Property.FontFeatureSettings;
        fontKerning?: import("csstype").Property.FontKerning;
        fontLanguageOverride?: import("csstype").Property.FontLanguageOverride;
        fontOpticalSizing?: import("csstype").Property.FontOpticalSizing;
        fontPalette?: import("csstype").Property.FontPalette;
        fontSize?: import("csstype").Property.FontSize<string | number>;
        fontSizeAdjust?: import("csstype").Property.FontSizeAdjust;
        fontSmooth?: import("csstype").Property.FontSmooth<string | number>;
        fontStretch?: import("csstype").Property.FontStretch;
        fontStyle?: import("csstype").Property.FontStyle;
        fontSynthesis?: import("csstype").Property.FontSynthesis;
        fontSynthesisPosition?: import("csstype").Property.FontSynthesisPosition;
        fontSynthesisSmallCaps?: import("csstype").Property.FontSynthesisSmallCaps;
        fontSynthesisStyle?: import("csstype").Property.FontSynthesisStyle;
        fontSynthesisWeight?: import("csstype").Property.FontSynthesisWeight;
        fontVariant?: import("csstype").Property.FontVariant;
        fontVariantAlternates?: import("csstype").Property.FontVariantAlternates;
        fontVariantCaps?: import("csstype").Property.FontVariantCaps;
        fontVariantEastAsian?: import("csstype").Property.FontVariantEastAsian;
        fontVariantEmoji?: import("csstype").Property.FontVariantEmoji;
        fontVariantLigatures?: import("csstype").Property.FontVariantLigatures;
        fontVariantNumeric?: import("csstype").Property.FontVariantNumeric;
        fontVariantPosition?: import("csstype").Property.FontVariantPosition;
        fontVariationSettings?: import("csstype").Property.FontVariationSettings;
        fontWeight?: import("csstype").Property.FontWeight;
        forcedColorAdjust?: import("csstype").Property.ForcedColorAdjust;
        gridAutoColumns?: import("csstype").Property.GridAutoColumns<string | number>;
        gridAutoFlow?: import("csstype").Property.GridAutoFlow;
        gridAutoRows?: import("csstype").Property.GridAutoRows<string | number>;
        gridColumnEnd?: import("csstype").Property.GridColumnEnd;
        gridColumnStart?: import("csstype").Property.GridColumnStart;
        gridRowEnd?: import("csstype").Property.GridRowEnd;
        gridRowStart?: import("csstype").Property.GridRowStart;
        gridTemplateAreas?: import("csstype").Property.GridTemplateAreas;
        gridTemplateColumns?: import("csstype").Property.GridTemplateColumns<string | number>;
        gridTemplateRows?: import("csstype").Property.GridTemplateRows<string | number>;
        hangingPunctuation?: import("csstype").Property.HangingPunctuation;
        height?: import("csstype").Property.Height<string | number>;
        hyphenateCharacter?: import("csstype").Property.HyphenateCharacter;
        hyphenateLimitChars?: import("csstype").Property.HyphenateLimitChars;
        hyphens?: import("csstype").Property.Hyphens;
        imageOrientation?: import("csstype").Property.ImageOrientation;
        imageRendering?: import("csstype").Property.ImageRendering;
        imageResolution?: import("csstype").Property.ImageResolution;
        initialLetter?: import("csstype").Property.InitialLetter;
        inlineSize?: import("csstype").Property.InlineSize<string | number>;
        inputSecurity?: import("csstype").Property.InputSecurity;
        insetBlockEnd?: import("csstype").Property.InsetBlockEnd<string | number>;
        insetBlockStart?: import("csstype").Property.InsetBlockStart<string | number>;
        insetInlineEnd?: import("csstype").Property.InsetInlineEnd<string | number>;
        insetInlineStart?: import("csstype").Property.InsetInlineStart<string | number>;
        isolation?: import("csstype").Property.Isolation;
        justifyContent?: import("csstype").Property.JustifyContent;
        justifyItems?: import("csstype").Property.JustifyItems;
        justifySelf?: import("csstype").Property.JustifySelf;
        justifyTracks?: import("csstype").Property.JustifyTracks;
        left?: import("csstype").Property.Left<string | number>;
        letterSpacing?: import("csstype").Property.LetterSpacing<string | number>;
        lineBreak?: import("csstype").Property.LineBreak;
        lineHeight?: import("csstype").Property.LineHeight<string | number>;
        lineHeightStep?: import("csstype").Property.LineHeightStep<string | number>;
        listStyleImage?: import("csstype").Property.ListStyleImage;
        listStylePosition?: import("csstype").Property.ListStylePosition;
        listStyleType?: import("csstype").Property.ListStyleType;
        marginBlockEnd?: import("csstype").Property.MarginBlockEnd<string | number>;
        marginBlockStart?: import("csstype").Property.MarginBlockStart<string | number>;
        marginBottom?: import("csstype").Property.MarginBottom<string | number>;
        marginInlineEnd?: import("csstype").Property.MarginInlineEnd<string | number>;
        marginInlineStart?: import("csstype").Property.MarginInlineStart<string | number>;
        marginLeft?: import("csstype").Property.MarginLeft<string | number>;
        marginRight?: import("csstype").Property.MarginRight<string | number>;
        marginTop?: import("csstype").Property.MarginTop<string | number>;
        marginTrim?: import("csstype").Property.MarginTrim;
        maskBorderMode?: import("csstype").Property.MaskBorderMode;
        maskBorderOutset?: import("csstype").Property.MaskBorderOutset<string | number>;
        maskBorderRepeat?: import("csstype").Property.MaskBorderRepeat;
        maskBorderSlice?: import("csstype").Property.MaskBorderSlice;
        maskBorderSource?: import("csstype").Property.MaskBorderSource;
        maskBorderWidth?: import("csstype").Property.MaskBorderWidth<string | number>;
        maskClip?: import("csstype").Property.MaskClip;
        maskComposite?: import("csstype").Property.MaskComposite;
        maskImage?: import("csstype").Property.MaskImage;
        maskMode?: import("csstype").Property.MaskMode;
        maskOrigin?: import("csstype").Property.MaskOrigin;
        maskPosition?: import("csstype").Property.MaskPosition<string | number>;
        maskRepeat?: import("csstype").Property.MaskRepeat;
        maskSize?: import("csstype").Property.MaskSize<string | number>;
        maskType?: import("csstype").Property.MaskType;
        masonryAutoFlow?: import("csstype").Property.MasonryAutoFlow;
        mathDepth?: import("csstype").Property.MathDepth;
        mathShift?: import("csstype").Property.MathShift;
        mathStyle?: import("csstype").Property.MathStyle;
        maxBlockSize?: import("csstype").Property.MaxBlockSize<string | number>;
        maxHeight?: import("csstype").Property.MaxHeight<string | number>;
        maxInlineSize?: import("csstype").Property.MaxInlineSize<string | number>;
        maxLines?: import("csstype").Property.MaxLines;
        maxWidth?: import("csstype").Property.MaxWidth<string | number>;
        minBlockSize?: import("csstype").Property.MinBlockSize<string | number>;
        minHeight?: import("csstype").Property.MinHeight<string | number>;
        minInlineSize?: import("csstype").Property.MinInlineSize<string | number>;
        minWidth?: import("csstype").Property.MinWidth<string | number>;
        mixBlendMode?: import("csstype").Property.MixBlendMode;
        motionDistance?: import("csstype").Property.OffsetDistance<string | number>;
        motionPath?: import("csstype").Property.OffsetPath;
        motionRotation?: import("csstype").Property.OffsetRotate;
        objectFit?: import("csstype").Property.ObjectFit;
        objectPosition?: import("csstype").Property.ObjectPosition<string | number>;
        offsetAnchor?: import("csstype").Property.OffsetAnchor<string | number>;
        offsetDistance?: import("csstype").Property.OffsetDistance<string | number>;
        offsetPath?: import("csstype").Property.OffsetPath;
        offsetPosition?: import("csstype").Property.OffsetPosition<string | number>;
        offsetRotate?: import("csstype").Property.OffsetRotate;
        offsetRotation?: import("csstype").Property.OffsetRotate;
        opacity?: import("csstype").Property.Opacity;
        order?: import("csstype").Property.Order;
        orphans?: import("csstype").Property.Orphans;
        outlineColor?: import("csstype").Property.OutlineColor;
        outlineOffset?: import("csstype").Property.OutlineOffset<string | number>;
        outlineStyle?: import("csstype").Property.OutlineStyle;
        outlineWidth?: import("csstype").Property.OutlineWidth<string | number>;
        overflowAnchor?: import("csstype").Property.OverflowAnchor;
        overflowBlock?: import("csstype").Property.OverflowBlock;
        overflowClipBox?: import("csstype").Property.OverflowClipBox;
        overflowClipMargin?: import("csstype").Property.OverflowClipMargin<string | number>;
        overflowInline?: import("csstype").Property.OverflowInline;
        overflowWrap?: import("csstype").Property.OverflowWrap;
        overflowX?: import("csstype").Property.OverflowX;
        overflowY?: import("csstype").Property.OverflowY;
        overlay?: import("csstype").Property.Overlay;
        overscrollBehaviorBlock?: import("csstype").Property.OverscrollBehaviorBlock;
        overscrollBehaviorInline?: import("csstype").Property.OverscrollBehaviorInline;
        overscrollBehaviorX?: import("csstype").Property.OverscrollBehaviorX;
        overscrollBehaviorY?: import("csstype").Property.OverscrollBehaviorY;
        paddingBlockEnd?: import("csstype").Property.PaddingBlockEnd<string | number>;
        paddingBlockStart?: import("csstype").Property.PaddingBlockStart<string | number>;
        paddingBottom?: import("csstype").Property.PaddingBottom<string | number>;
        paddingInlineEnd?: import("csstype").Property.PaddingInlineEnd<string | number>;
        paddingInlineStart?: import("csstype").Property.PaddingInlineStart<string | number>;
        paddingLeft?: import("csstype").Property.PaddingLeft<string | number>;
        paddingRight?: import("csstype").Property.PaddingRight<string | number>;
        paddingTop?: import("csstype").Property.PaddingTop<string | number>;
        page?: import("csstype").Property.Page;
        pageBreakAfter?: import("csstype").Property.PageBreakAfter;
        pageBreakBefore?: import("csstype").Property.PageBreakBefore;
        pageBreakInside?: import("csstype").Property.PageBreakInside;
        paintOrder?: import("csstype").Property.PaintOrder;
        perspective?: import("csstype").Property.Perspective<string | number>;
        perspectiveOrigin?: import("csstype").Property.PerspectiveOrigin<string | number>;
        pointerEvents?: import("csstype").Property.PointerEvents;
        position?: import("csstype").Property.Position;
        printColorAdjust?: import("csstype").Property.PrintColorAdjust;
        quotes?: import("csstype").Property.Quotes;
        resize?: import("csstype").Property.Resize;
        right?: import("csstype").Property.Right<string | number>;
        rotate?: import("csstype").Property.Rotate;
        rubyAlign?: import("csstype").Property.RubyAlign;
        rubyMerge?: import("csstype").Property.RubyMerge;
        rubyPosition?: import("csstype").Property.RubyPosition;
        scale?: import("csstype").Property.Scale;
        scrollBehavior?: import("csstype").Property.ScrollBehavior;
        scrollMarginBlockEnd?: import("csstype").Property.ScrollMarginBlockEnd<string | number>;
        scrollMarginBlockStart?: import("csstype").Property.ScrollMarginBlockStart<string | number>;
        scrollMarginBottom?: import("csstype").Property.ScrollMarginBottom<string | number>;
        scrollMarginInlineEnd?: import("csstype").Property.ScrollMarginInlineEnd<string | number>;
        scrollMarginInlineStart?: import("csstype").Property.ScrollMarginInlineStart<string | number>;
        scrollMarginLeft?: import("csstype").Property.ScrollMarginLeft<string | number>;
        scrollMarginRight?: import("csstype").Property.ScrollMarginRight<string | number>;
        scrollMarginTop?: import("csstype").Property.ScrollMarginTop<string | number>;
        scrollPaddingBlockEnd?: import("csstype").Property.ScrollPaddingBlockEnd<string | number>;
        scrollPaddingBlockStart?: import("csstype").Property.ScrollPaddingBlockStart<string | number>;
        scrollPaddingBottom?: import("csstype").Property.ScrollPaddingBottom<string | number>;
        scrollPaddingInlineEnd?: import("csstype").Property.ScrollPaddingInlineEnd<string | number>;
        scrollPaddingInlineStart?: import("csstype").Property.ScrollPaddingInlineStart<string | number>;
        scrollPaddingLeft?: import("csstype").Property.ScrollPaddingLeft<string | number>;
        scrollPaddingRight?: import("csstype").Property.ScrollPaddingRight<string | number>;
        scrollPaddingTop?: import("csstype").Property.ScrollPaddingTop<string | number>;
        scrollSnapAlign?: import("csstype").Property.ScrollSnapAlign;
        scrollSnapMarginBottom?: import("csstype").Property.ScrollMarginBottom<string | number>;
        scrollSnapMarginLeft?: import("csstype").Property.ScrollMarginLeft<string | number>;
        scrollSnapMarginRight?: import("csstype").Property.ScrollMarginRight<string | number>;
        scrollSnapMarginTop?: import("csstype").Property.ScrollMarginTop<string | number>;
        scrollSnapStop?: import("csstype").Property.ScrollSnapStop;
        scrollSnapType?: import("csstype").Property.ScrollSnapType;
        scrollTimelineAxis?: import("csstype").Property.ScrollTimelineAxis;
        scrollTimelineName?: import("csstype").Property.ScrollTimelineName;
        scrollbarColor?: import("csstype").Property.ScrollbarColor;
        scrollbarGutter?: import("csstype").Property.ScrollbarGutter;
        scrollbarWidth?: import("csstype").Property.ScrollbarWidth;
        shapeImageThreshold?: import("csstype").Property.ShapeImageThreshold;
        shapeMargin?: import("csstype").Property.ShapeMargin<string | number>;
        shapeOutside?: import("csstype").Property.ShapeOutside;
        tabSize?: import("csstype").Property.TabSize<string | number>;
        tableLayout?: import("csstype").Property.TableLayout;
        textAlign?: import("csstype").Property.TextAlign;
        textAlignLast?: import("csstype").Property.TextAlignLast;
        textCombineUpright?: import("csstype").Property.TextCombineUpright;
        textDecorationColor?: import("csstype").Property.TextDecorationColor;
        textDecorationLine?: import("csstype").Property.TextDecorationLine;
        textDecorationSkip?: import("csstype").Property.TextDecorationSkip;
        textDecorationSkipInk?: import("csstype").Property.TextDecorationSkipInk;
        textDecorationStyle?: import("csstype").Property.TextDecorationStyle;
        textDecorationThickness?: import("csstype").Property.TextDecorationThickness<string | number>;
        textEmphasisColor?: import("csstype").Property.TextEmphasisColor;
        textEmphasisPosition?: import("csstype").Property.TextEmphasisPosition;
        textEmphasisStyle?: import("csstype").Property.TextEmphasisStyle;
        textIndent?: import("csstype").Property.TextIndent<string | number>;
        textJustify?: import("csstype").Property.TextJustify;
        textOrientation?: import("csstype").Property.TextOrientation;
        textOverflow?: import("csstype").Property.TextOverflow;
        textRendering?: import("csstype").Property.TextRendering;
        textShadow?: import("csstype").Property.TextShadow;
        textSizeAdjust?: import("csstype").Property.TextSizeAdjust;
        textTransform?: import("csstype").Property.TextTransform;
        textUnderlineOffset?: import("csstype").Property.TextUnderlineOffset<string | number>;
        textUnderlinePosition?: import("csstype").Property.TextUnderlinePosition;
        textWrap?: import("csstype").Property.TextWrap;
        timelineScope?: import("csstype").Property.TimelineScope;
        top?: import("csstype").Property.Top<string | number>;
        touchAction?: import("csstype").Property.TouchAction;
        transform?: import("csstype").Property.Transform;
        transformBox?: import("csstype").Property.TransformBox;
        transformOrigin?: import("csstype").Property.TransformOrigin<string | number>;
        transformStyle?: import("csstype").Property.TransformStyle;
        transitionBehavior?: import("csstype").Property.TransitionBehavior;
        transitionDelay?: import("csstype").Property.TransitionDelay<string & {}>;
        transitionDuration?: import("csstype").Property.TransitionDuration<string & {}>;
        transitionProperty?: import("csstype").Property.TransitionProperty;
        transitionTimingFunction?: import("csstype").Property.TransitionTimingFunction;
        translate?: import("csstype").Property.Translate<string | number>;
        unicodeBidi?: import("csstype").Property.UnicodeBidi;
        userSelect?: import("csstype").Property.UserSelect;
        verticalAlign?: import("csstype").Property.VerticalAlign<string | number>;
        viewTimelineAxis?: import("csstype").Property.ViewTimelineAxis;
        viewTimelineInset?: import("csstype").Property.ViewTimelineInset<string | number>;
        viewTimelineName?: import("csstype").Property.ViewTimelineName;
        viewTransitionName?: import("csstype").Property.ViewTransitionName;
        visibility?: import("csstype").Property.Visibility;
        whiteSpace?: import("csstype").Property.WhiteSpace;
        whiteSpaceCollapse?: import("csstype").Property.WhiteSpaceCollapse;
        whiteSpaceTrim?: import("csstype").Property.WhiteSpaceTrim;
        widows?: import("csstype").Property.Widows;
        width?: import("csstype").Property.Width<string | number>;
        willChange?: import("csstype").Property.WillChange;
        wordBreak?: import("csstype").Property.WordBreak;
        wordSpacing?: import("csstype").Property.WordSpacing<string | number>;
        wordWrap?: import("csstype").Property.WordWrap;
        writingMode?: import("csstype").Property.WritingMode;
        zIndex?: import("csstype").Property.ZIndex;
        zoom?: import("csstype").Property.Zoom;
        all?: import("csstype").Globals;
        animation?: import("csstype").Property.Animation<string & {}>;
        animationRange?: import("csstype").Property.AnimationRange<string | number>;
        background?: import("csstype").Property.Background<string | number>;
        backgroundPosition?: import("csstype").Property.BackgroundPosition<string | number>;
        border?: import("csstype").Property.Border<string | number>;
        borderBlock?: import("csstype").Property.BorderBlock<string | number>;
        borderBlockEnd?: import("csstype").Property.BorderBlockEnd<string | number>;
        borderBlockStart?: import("csstype").Property.BorderBlockStart<string | number>;
        borderBottom?: import("csstype").Property.BorderBottom<string | number>;
        borderColor?: import("csstype").Property.BorderColor;
        borderImage?: import("csstype").Property.BorderImage;
        borderInline?: import("csstype").Property.BorderInline<string | number>;
        borderInlineEnd?: import("csstype").Property.BorderInlineEnd<string | number>;
        borderInlineStart?: import("csstype").Property.BorderInlineStart<string | number>;
        borderLeft?: import("csstype").Property.BorderLeft<string | number>;
        borderRadius?: import("csstype").Property.BorderRadius<string | number>;
        borderRight?: import("csstype").Property.BorderRight<string | number>;
        borderStyle?: import("csstype").Property.BorderStyle;
        borderTop?: import("csstype").Property.BorderTop<string | number>;
        borderWidth?: import("csstype").Property.BorderWidth<string | number>;
        caret?: import("csstype").Property.Caret;
        columnRule?: import("csstype").Property.ColumnRule<string | number>;
        columns?: import("csstype").Property.Columns<string | number>;
        containIntrinsicSize?: import("csstype").Property.ContainIntrinsicSize<string | number>;
        container?: import("csstype").Property.Container;
        flex?: import("csstype").Property.Flex<string | number>;
        flexFlow?: import("csstype").Property.FlexFlow;
        font?: import("csstype").Property.Font;
        grid?: import("csstype").Property.Grid;
        gridArea?: import("csstype").Property.GridArea;
        gridColumn?: import("csstype").Property.GridColumn;
        gridRow?: import("csstype").Property.GridRow;
        gridTemplate?: import("csstype").Property.GridTemplate;
        inset?: import("csstype").Property.Inset<string | number>;
        insetBlock?: import("csstype").Property.InsetBlock<string | number>;
        insetInline?: import("csstype").Property.InsetInline<string | number>;
        lineClamp?: import("csstype").Property.LineClamp;
        listStyle?: import("csstype").Property.ListStyle;
        margin?: import("csstype").Property.Margin<string | number>;
        marginBlock?: import("csstype").Property.MarginBlock<string | number>;
        marginInline?: import("csstype").Property.MarginInline<string | number>;
        mask?: import("csstype").Property.Mask<string | number>;
        maskBorder?: import("csstype").Property.MaskBorder;
        motion?: import("csstype").Property.Offset<string | number>;
        offset?: import("csstype").Property.Offset<string | number>;
        outline?: import("csstype").Property.Outline<string | number>;
        overflow?: import("csstype").Property.Overflow;
        overscrollBehavior?: import("csstype").Property.OverscrollBehavior;
        padding?: import("csstype").Property.Padding<string | number>;
        paddingBlock?: import("csstype").Property.PaddingBlock<string | number>;
        paddingInline?: import("csstype").Property.PaddingInline<string | number>;
        placeContent?: import("csstype").Property.PlaceContent;
        placeItems?: import("csstype").Property.PlaceItems;
        placeSelf?: import("csstype").Property.PlaceSelf;
        scrollMargin?: import("csstype").Property.ScrollMargin<string | number>;
        scrollMarginBlock?: import("csstype").Property.ScrollMarginBlock<string | number>;
        scrollMarginInline?: import("csstype").Property.ScrollMarginInline<string | number>;
        scrollPadding?: import("csstype").Property.ScrollPadding<string | number>;
        scrollPaddingBlock?: import("csstype").Property.ScrollPaddingBlock<string | number>;
        scrollPaddingInline?: import("csstype").Property.ScrollPaddingInline<string | number>;
        scrollSnapMargin?: import("csstype").Property.ScrollMargin<string | number>;
        scrollTimeline?: import("csstype").Property.ScrollTimeline;
        textDecoration?: import("csstype").Property.TextDecoration<string | number>;
        textEmphasis?: import("csstype").Property.TextEmphasis;
        transition?: import("csstype").Property.Transition<string & {}>;
        viewTimeline?: import("csstype").Property.ViewTimeline;
        MozAnimationDelay?: import("csstype").Property.AnimationDelay<string & {}>;
        MozAnimationDirection?: import("csstype").Property.AnimationDirection;
        MozAnimationDuration?: import("csstype").Property.AnimationDuration<string & {}>;
        MozAnimationFillMode?: import("csstype").Property.AnimationFillMode;
        MozAnimationIterationCount?: import("csstype").Property.AnimationIterationCount;
        MozAnimationName?: import("csstype").Property.AnimationName;
        MozAnimationPlayState?: import("csstype").Property.AnimationPlayState;
        MozAnimationTimingFunction?: import("csstype").Property.AnimationTimingFunction;
        MozAppearance?: import("csstype").Property.MozAppearance;
        MozBinding?: import("csstype").Property.MozBinding;
        MozBorderBottomColors?: import("csstype").Property.MozBorderBottomColors;
        MozBorderEndColor?: import("csstype").Property.BorderInlineEndColor;
        MozBorderEndStyle?: import("csstype").Property.BorderInlineEndStyle;
        MozBorderEndWidth?: import("csstype").Property.BorderInlineEndWidth<string | number>;
        MozBorderLeftColors?: import("csstype").Property.MozBorderLeftColors;
        MozBorderRightColors?: import("csstype").Property.MozBorderRightColors;
        MozBorderStartColor?: import("csstype").Property.BorderInlineStartColor;
        MozBorderStartStyle?: import("csstype").Property.BorderInlineStartStyle;
        MozBorderTopColors?: import("csstype").Property.MozBorderTopColors;
        MozBoxSizing?: import("csstype").Property.BoxSizing;
        MozColumnCount?: import("csstype").Property.ColumnCount;
        MozColumnFill?: import("csstype").Property.ColumnFill;
        MozColumnRuleColor?: import("csstype").Property.ColumnRuleColor;
        MozColumnRuleStyle?: import("csstype").Property.ColumnRuleStyle;
        MozColumnRuleWidth?: import("csstype").Property.ColumnRuleWidth<string | number>;
        MozColumnWidth?: import("csstype").Property.ColumnWidth<string | number>;
        MozContextProperties?: import("csstype").Property.MozContextProperties;
        MozFontFeatureSettings?: import("csstype").Property.FontFeatureSettings;
        MozFontLanguageOverride?: import("csstype").Property.FontLanguageOverride;
        MozHyphens?: import("csstype").Property.Hyphens;
        MozImageRegion?: import("csstype").Property.MozImageRegion;
        MozMarginEnd?: import("csstype").Property.MarginInlineEnd<string | number>;
        MozMarginStart?: import("csstype").Property.MarginInlineStart<string | number>;
        MozOrient?: import("csstype").Property.MozOrient;
        MozOsxFontSmoothing?: import("csstype").Property.FontSmooth<string | number>;
        MozOutlineRadiusBottomleft?: import("csstype").Property.MozOutlineRadiusBottomleft<string | number>;
        MozOutlineRadiusBottomright?: import("csstype").Property.MozOutlineRadiusBottomright<string | number>;
        MozOutlineRadiusTopleft?: import("csstype").Property.MozOutlineRadiusTopleft<string | number>;
        MozOutlineRadiusTopright?: import("csstype").Property.MozOutlineRadiusTopright<string | number>;
        MozPaddingEnd?: import("csstype").Property.PaddingInlineEnd<string | number>;
        MozPaddingStart?: import("csstype").Property.PaddingInlineStart<string | number>;
        MozStackSizing?: import("csstype").Property.MozStackSizing;
        MozTabSize?: import("csstype").Property.TabSize<string | number>;
        MozTextBlink?: import("csstype").Property.MozTextBlink;
        MozTextSizeAdjust?: import("csstype").Property.TextSizeAdjust;
        MozUserFocus?: import("csstype").Property.MozUserFocus;
        MozUserModify?: import("csstype").Property.MozUserModify;
        MozUserSelect?: import("csstype").Property.UserSelect;
        MozWindowDragging?: import("csstype").Property.MozWindowDragging;
        MozWindowShadow?: import("csstype").Property.MozWindowShadow;
        msAccelerator?: import("csstype").Property.MsAccelerator;
        msBlockProgression?: import("csstype").Property.MsBlockProgression;
        msContentZoomChaining?: import("csstype").Property.MsContentZoomChaining;
        msContentZoomLimitMax?: import("csstype").Property.MsContentZoomLimitMax;
        msContentZoomLimitMin?: import("csstype").Property.MsContentZoomLimitMin;
        msContentZoomSnapPoints?: import("csstype").Property.MsContentZoomSnapPoints;
        msContentZoomSnapType?: import("csstype").Property.MsContentZoomSnapType;
        msContentZooming?: import("csstype").Property.MsContentZooming;
        msFilter?: import("csstype").Property.MsFilter;
        msFlexDirection?: import("csstype").Property.FlexDirection;
        msFlexPositive?: import("csstype").Property.FlexGrow;
        msFlowFrom?: import("csstype").Property.MsFlowFrom;
        msFlowInto?: import("csstype").Property.MsFlowInto;
        msGridColumns?: import("csstype").Property.MsGridColumns<string | number>;
        msGridRows?: import("csstype").Property.MsGridRows<string | number>;
        msHighContrastAdjust?: import("csstype").Property.MsHighContrastAdjust;
        msHyphenateLimitChars?: import("csstype").Property.MsHyphenateLimitChars;
        msHyphenateLimitLines?: import("csstype").Property.MsHyphenateLimitLines;
        msHyphenateLimitZone?: import("csstype").Property.MsHyphenateLimitZone<string | number>;
        msHyphens?: import("csstype").Property.Hyphens;
        msImeAlign?: import("csstype").Property.MsImeAlign;
        msLineBreak?: import("csstype").Property.LineBreak;
        msOrder?: import("csstype").Property.Order;
        msOverflowStyle?: import("csstype").Property.MsOverflowStyle;
        msOverflowX?: import("csstype").Property.OverflowX;
        msOverflowY?: import("csstype").Property.OverflowY;
        msScrollChaining?: import("csstype").Property.MsScrollChaining;
        msScrollLimitXMax?: import("csstype").Property.MsScrollLimitXMax<string | number>;
        msScrollLimitXMin?: import("csstype").Property.MsScrollLimitXMin<string | number>;
        msScrollLimitYMax?: import("csstype").Property.MsScrollLimitYMax<string | number>;
        msScrollLimitYMin?: import("csstype").Property.MsScrollLimitYMin<string | number>;
        msScrollRails?: import("csstype").Property.MsScrollRails;
        msScrollSnapPointsX?: import("csstype").Property.MsScrollSnapPointsX;
        msScrollSnapPointsY?: import("csstype").Property.MsScrollSnapPointsY;
        msScrollSnapType?: import("csstype").Property.MsScrollSnapType;
        msScrollTranslation?: import("csstype").Property.MsScrollTranslation;
        msScrollbar3dlightColor?: import("csstype").Property.MsScrollbar3dlightColor;
        msScrollbarArrowColor?: import("csstype").Property.MsScrollbarArrowColor;
        msScrollbarBaseColor?: import("csstype").Property.MsScrollbarBaseColor;
        msScrollbarDarkshadowColor?: import("csstype").Property.MsScrollbarDarkshadowColor;
        msScrollbarFaceColor?: import("csstype").Property.MsScrollbarFaceColor;
        msScrollbarHighlightColor?: import("csstype").Property.MsScrollbarHighlightColor;
        msScrollbarShadowColor?: import("csstype").Property.MsScrollbarShadowColor;
        msScrollbarTrackColor?: import("csstype").Property.MsScrollbarTrackColor;
        msTextAutospace?: import("csstype").Property.MsTextAutospace;
        msTextCombineHorizontal?: import("csstype").Property.TextCombineUpright;
        msTextOverflow?: import("csstype").Property.TextOverflow;
        msTouchAction?: import("csstype").Property.TouchAction;
        msTouchSelect?: import("csstype").Property.MsTouchSelect;
        msTransform?: import("csstype").Property.Transform;
        msTransformOrigin?: import("csstype").Property.TransformOrigin<string | number>;
        msTransitionDelay?: import("csstype").Property.TransitionDelay<string & {}>;
        msTransitionDuration?: import("csstype").Property.TransitionDuration<string & {}>;
        msTransitionProperty?: import("csstype").Property.TransitionProperty;
        msTransitionTimingFunction?: import("csstype").Property.TransitionTimingFunction;
        msUserSelect?: import("csstype").Property.MsUserSelect;
        msWordBreak?: import("csstype").Property.WordBreak;
        msWrapFlow?: import("csstype").Property.MsWrapFlow;
        msWrapMargin?: import("csstype").Property.MsWrapMargin<string | number>;
        msWrapThrough?: import("csstype").Property.MsWrapThrough;
        msWritingMode?: import("csstype").Property.WritingMode;
        WebkitAlignContent?: import("csstype").Property.AlignContent;
        WebkitAlignItems?: import("csstype").Property.AlignItems;
        WebkitAlignSelf?: import("csstype").Property.AlignSelf;
        WebkitAnimationDelay?: import("csstype").Property.AnimationDelay<string & {}>;
        WebkitAnimationDirection?: import("csstype").Property.AnimationDirection;
        WebkitAnimationDuration?: import("csstype").Property.AnimationDuration<string & {}>;
        WebkitAnimationFillMode?: import("csstype").Property.AnimationFillMode;
        WebkitAnimationIterationCount?: import("csstype").Property.AnimationIterationCount;
        WebkitAnimationName?: import("csstype").Property.AnimationName;
        WebkitAnimationPlayState?: import("csstype").Property.AnimationPlayState;
        WebkitAnimationTimingFunction?: import("csstype").Property.AnimationTimingFunction;
        WebkitAppearance?: import("csstype").Property.WebkitAppearance;
        WebkitBackdropFilter?: import("csstype").Property.BackdropFilter;
        WebkitBackfaceVisibility?: import("csstype").Property.BackfaceVisibility;
        WebkitBackgroundClip?: import("csstype").Property.BackgroundClip;
        WebkitBackgroundOrigin?: import("csstype").Property.BackgroundOrigin;
        WebkitBackgroundSize?: import("csstype").Property.BackgroundSize<string | number>;
        WebkitBorderBeforeColor?: import("csstype").Property.WebkitBorderBeforeColor;
        WebkitBorderBeforeStyle?: import("csstype").Property.WebkitBorderBeforeStyle;
        WebkitBorderBeforeWidth?: import("csstype").Property.WebkitBorderBeforeWidth<string | number>;
        WebkitBorderBottomLeftRadius?: import("csstype").Property.BorderBottomLeftRadius<string | number>;
        WebkitBorderBottomRightRadius?: import("csstype").Property.BorderBottomRightRadius<string | number>;
        WebkitBorderImageSlice?: import("csstype").Property.BorderImageSlice;
        WebkitBorderTopLeftRadius?: import("csstype").Property.BorderTopLeftRadius<string | number>;
        WebkitBorderTopRightRadius?: import("csstype").Property.BorderTopRightRadius<string | number>;
        WebkitBoxDecorationBreak?: import("csstype").Property.BoxDecorationBreak;
        WebkitBoxReflect?: import("csstype").Property.WebkitBoxReflect<string | number>;
        WebkitBoxShadow?: import("csstype").Property.BoxShadow;
        WebkitBoxSizing?: import("csstype").Property.BoxSizing;
        WebkitClipPath?: import("csstype").Property.ClipPath;
        WebkitColumnCount?: import("csstype").Property.ColumnCount;
        WebkitColumnFill?: import("csstype").Property.ColumnFill;
        WebkitColumnRuleColor?: import("csstype").Property.ColumnRuleColor;
        WebkitColumnRuleStyle?: import("csstype").Property.ColumnRuleStyle;
        WebkitColumnRuleWidth?: import("csstype").Property.ColumnRuleWidth<string | number>;
        WebkitColumnSpan?: import("csstype").Property.ColumnSpan;
        WebkitColumnWidth?: import("csstype").Property.ColumnWidth<string | number>;
        WebkitFilter?: import("csstype").Property.Filter;
        WebkitFlexBasis?: import("csstype").Property.FlexBasis<string | number>;
        WebkitFlexDirection?: import("csstype").Property.FlexDirection;
        WebkitFlexGrow?: import("csstype").Property.FlexGrow;
        WebkitFlexShrink?: import("csstype").Property.FlexShrink;
        WebkitFlexWrap?: import("csstype").Property.FlexWrap;
        WebkitFontFeatureSettings?: import("csstype").Property.FontFeatureSettings;
        WebkitFontKerning?: import("csstype").Property.FontKerning;
        WebkitFontSmoothing?: import("csstype").Property.FontSmooth<string | number>;
        WebkitFontVariantLigatures?: import("csstype").Property.FontVariantLigatures;
        WebkitHyphenateCharacter?: import("csstype").Property.HyphenateCharacter;
        WebkitHyphens?: import("csstype").Property.Hyphens;
        WebkitInitialLetter?: import("csstype").Property.InitialLetter;
        WebkitJustifyContent?: import("csstype").Property.JustifyContent;
        WebkitLineBreak?: import("csstype").Property.LineBreak;
        WebkitLineClamp?: import("csstype").Property.WebkitLineClamp;
        WebkitMarginEnd?: import("csstype").Property.MarginInlineEnd<string | number>;
        WebkitMarginStart?: import("csstype").Property.MarginInlineStart<string | number>;
        WebkitMaskAttachment?: import("csstype").Property.WebkitMaskAttachment;
        WebkitMaskBoxImageOutset?: import("csstype").Property.MaskBorderOutset<string | number>;
        WebkitMaskBoxImageRepeat?: import("csstype").Property.MaskBorderRepeat;
        WebkitMaskBoxImageSlice?: import("csstype").Property.MaskBorderSlice;
        WebkitMaskBoxImageSource?: import("csstype").Property.MaskBorderSource;
        WebkitMaskBoxImageWidth?: import("csstype").Property.MaskBorderWidth<string | number>;
        WebkitMaskClip?: import("csstype").Property.WebkitMaskClip;
        WebkitMaskComposite?: import("csstype").Property.WebkitMaskComposite;
        WebkitMaskImage?: import("csstype").Property.WebkitMaskImage;
        WebkitMaskOrigin?: import("csstype").Property.WebkitMaskOrigin;
        WebkitMaskPosition?: import("csstype").Property.WebkitMaskPosition<string | number>;
        WebkitMaskPositionX?: import("csstype").Property.WebkitMaskPositionX<string | number>;
        WebkitMaskPositionY?: import("csstype").Property.WebkitMaskPositionY<string | number>;
        WebkitMaskRepeat?: import("csstype").Property.WebkitMaskRepeat;
        WebkitMaskRepeatX?: import("csstype").Property.WebkitMaskRepeatX;
        WebkitMaskRepeatY?: import("csstype").Property.WebkitMaskRepeatY;
        WebkitMaskSize?: import("csstype").Property.WebkitMaskSize<string | number>;
        WebkitMaxInlineSize?: import("csstype").Property.MaxInlineSize<string | number>;
        WebkitOrder?: import("csstype").Property.Order;
        WebkitOverflowScrolling?: import("csstype").Property.WebkitOverflowScrolling;
        WebkitPaddingEnd?: import("csstype").Property.PaddingInlineEnd<string | number>;
        WebkitPaddingStart?: import("csstype").Property.PaddingInlineStart<string | number>;
        WebkitPerspective?: import("csstype").Property.Perspective<string | number>;
        WebkitPerspectiveOrigin?: import("csstype").Property.PerspectiveOrigin<string | number>;
        WebkitPrintColorAdjust?: import("csstype").Property.PrintColorAdjust;
        WebkitRubyPosition?: import("csstype").Property.RubyPosition;
        WebkitScrollSnapType?: import("csstype").Property.ScrollSnapType;
        WebkitShapeMargin?: import("csstype").Property.ShapeMargin<string | number>;
        WebkitTapHighlightColor?: import("csstype").Property.WebkitTapHighlightColor;
        WebkitTextCombine?: import("csstype").Property.TextCombineUpright;
        WebkitTextDecorationColor?: import("csstype").Property.TextDecorationColor;
        WebkitTextDecorationLine?: import("csstype").Property.TextDecorationLine;
        WebkitTextDecorationSkip?: import("csstype").Property.TextDecorationSkip;
        WebkitTextDecorationStyle?: import("csstype").Property.TextDecorationStyle;
        WebkitTextEmphasisColor?: import("csstype").Property.TextEmphasisColor;
        WebkitTextEmphasisPosition?: import("csstype").Property.TextEmphasisPosition;
        WebkitTextEmphasisStyle?: import("csstype").Property.TextEmphasisStyle;
        WebkitTextFillColor?: import("csstype").Property.WebkitTextFillColor;
        WebkitTextOrientation?: import("csstype").Property.TextOrientation;
        WebkitTextSizeAdjust?: import("csstype").Property.TextSizeAdjust;
        WebkitTextStrokeColor?: import("csstype").Property.WebkitTextStrokeColor;
        WebkitTextStrokeWidth?: import("csstype").Property.WebkitTextStrokeWidth<string | number>;
        WebkitTextUnderlinePosition?: import("csstype").Property.TextUnderlinePosition;
        WebkitTouchCallout?: import("csstype").Property.WebkitTouchCallout;
        WebkitTransform?: import("csstype").Property.Transform;
        WebkitTransformOrigin?: import("csstype").Property.TransformOrigin<string | number>;
        WebkitTransformStyle?: import("csstype").Property.TransformStyle;
        WebkitTransitionDelay?: import("csstype").Property.TransitionDelay<string & {}>;
        WebkitTransitionDuration?: import("csstype").Property.TransitionDuration<string & {}>;
        WebkitTransitionProperty?: import("csstype").Property.TransitionProperty;
        WebkitTransitionTimingFunction?: import("csstype").Property.TransitionTimingFunction;
        WebkitUserModify?: import("csstype").Property.WebkitUserModify;
        WebkitUserSelect?: import("csstype").Property.UserSelect;
        WebkitWritingMode?: import("csstype").Property.WritingMode;
        MozAnimation?: import("csstype").Property.Animation<string & {}>;
        MozBorderImage?: import("csstype").Property.BorderImage;
        MozColumnRule?: import("csstype").Property.ColumnRule<string | number>;
        MozColumns?: import("csstype").Property.Columns<string | number>;
        MozOutlineRadius?: import("csstype").Property.MozOutlineRadius<string | number>;
        msContentZoomLimit?: import("csstype").Property.MsContentZoomLimit;
        msContentZoomSnap?: import("csstype").Property.MsContentZoomSnap;
        msFlex?: import("csstype").Property.Flex<string | number>;
        msScrollLimit?: import("csstype").Property.MsScrollLimit;
        msScrollSnapX?: import("csstype").Property.MsScrollSnapX;
        msScrollSnapY?: import("csstype").Property.MsScrollSnapY;
        msTransition?: import("csstype").Property.Transition<string & {}>;
        WebkitAnimation?: import("csstype").Property.Animation<string & {}>;
        WebkitBorderBefore?: import("csstype").Property.WebkitBorderBefore<string | number>;
        WebkitBorderImage?: import("csstype").Property.BorderImage;
        WebkitBorderRadius?: import("csstype").Property.BorderRadius<string | number>;
        WebkitColumnRule?: import("csstype").Property.ColumnRule<string | number>;
        WebkitColumns?: import("csstype").Property.Columns<string | number>;
        WebkitFlex?: import("csstype").Property.Flex<string | number>;
        WebkitFlexFlow?: import("csstype").Property.FlexFlow;
        WebkitMask?: import("csstype").Property.WebkitMask<string | number>;
        WebkitMaskBoxImage?: import("csstype").Property.MaskBorder;
        WebkitTextEmphasis?: import("csstype").Property.TextEmphasis;
        WebkitTextStroke?: import("csstype").Property.WebkitTextStroke<string | number>;
        WebkitTransition?: import("csstype").Property.Transition<string & {}>;
        azimuth?: import("csstype").Property.Azimuth;
        boxAlign?: import("csstype").Property.BoxAlign;
        boxDirection?: import("csstype").Property.BoxDirection;
        boxFlex?: import("csstype").Property.BoxFlex;
        boxFlexGroup?: import("csstype").Property.BoxFlexGroup;
        boxLines?: import("csstype").Property.BoxLines;
        boxOrdinalGroup?: import("csstype").Property.BoxOrdinalGroup;
        boxOrient?: import("csstype").Property.BoxOrient;
        boxPack?: import("csstype").Property.BoxPack;
        clip?: import("csstype").Property.Clip;
        gridColumnGap?: import("csstype").Property.GridColumnGap<string | number>;
        gridGap?: import("csstype").Property.GridGap<string | number>;
        gridRowGap?: import("csstype").Property.GridRowGap<string | number>;
        imeMode?: import("csstype").Property.ImeMode;
        offsetBlock?: import("csstype").Property.InsetBlock<string | number>;
        offsetBlockEnd?: import("csstype").Property.InsetBlockEnd<string | number>;
        offsetBlockStart?: import("csstype").Property.InsetBlockStart<string | number>;
        offsetInline?: import("csstype").Property.InsetInline<string | number>;
        offsetInlineEnd?: import("csstype").Property.InsetInlineEnd<string | number>;
        offsetInlineStart?: import("csstype").Property.InsetInlineStart<string | number>;
        scrollSnapCoordinate?: import("csstype").Property.ScrollSnapCoordinate<string | number>;
        scrollSnapDestination?: import("csstype").Property.ScrollSnapDestination<string | number>;
        scrollSnapPointsX?: import("csstype").Property.ScrollSnapPointsX;
        scrollSnapPointsY?: import("csstype").Property.ScrollSnapPointsY;
        scrollSnapTypeX?: import("csstype").Property.ScrollSnapTypeX;
        scrollSnapTypeY?: import("csstype").Property.ScrollSnapTypeY;
        KhtmlBoxAlign?: import("csstype").Property.BoxAlign;
        KhtmlBoxDirection?: import("csstype").Property.BoxDirection;
        KhtmlBoxFlex?: import("csstype").Property.BoxFlex;
        KhtmlBoxFlexGroup?: import("csstype").Property.BoxFlexGroup;
        KhtmlBoxLines?: import("csstype").Property.BoxLines;
        KhtmlBoxOrdinalGroup?: import("csstype").Property.BoxOrdinalGroup;
        KhtmlBoxOrient?: import("csstype").Property.BoxOrient;
        KhtmlBoxPack?: import("csstype").Property.BoxPack;
        KhtmlLineBreak?: import("csstype").Property.LineBreak;
        KhtmlOpacity?: import("csstype").Property.Opacity;
        KhtmlUserSelect?: import("csstype").Property.UserSelect;
        MozBackfaceVisibility?: import("csstype").Property.BackfaceVisibility;
        MozBackgroundClip?: import("csstype").Property.BackgroundClip;
        MozBackgroundInlinePolicy?: import("csstype").Property.BoxDecorationBreak;
        MozBackgroundOrigin?: import("csstype").Property.BackgroundOrigin;
        MozBackgroundSize?: import("csstype").Property.BackgroundSize<string | number>;
        MozBorderRadius?: import("csstype").Property.BorderRadius<string | number>;
        MozBorderRadiusBottomleft?: import("csstype").Property.BorderBottomLeftRadius<string | number>;
        MozBorderRadiusBottomright?: import("csstype").Property.BorderBottomRightRadius<string | number>;
        MozBorderRadiusTopleft?: import("csstype").Property.BorderTopLeftRadius<string | number>;
        MozBorderRadiusTopright?: import("csstype").Property.BorderTopRightRadius<string | number>;
        MozBoxAlign?: import("csstype").Property.BoxAlign;
        MozBoxDirection?: import("csstype").Property.BoxDirection;
        MozBoxFlex?: import("csstype").Property.BoxFlex;
        MozBoxOrdinalGroup?: import("csstype").Property.BoxOrdinalGroup;
        MozBoxOrient?: import("csstype").Property.BoxOrient;
        MozBoxPack?: import("csstype").Property.BoxPack;
        MozBoxShadow?: import("csstype").Property.BoxShadow;
        MozFloatEdge?: import("csstype").Property.MozFloatEdge;
        MozForceBrokenImageIcon?: import("csstype").Property.MozForceBrokenImageIcon;
        MozOpacity?: import("csstype").Property.Opacity;
        MozOutline?: import("csstype").Property.Outline<string | number>;
        MozOutlineColor?: import("csstype").Property.OutlineColor;
        MozOutlineStyle?: import("csstype").Property.OutlineStyle;
        MozOutlineWidth?: import("csstype").Property.OutlineWidth<string | number>;
        MozPerspective?: import("csstype").Property.Perspective<string | number>;
        MozPerspectiveOrigin?: import("csstype").Property.PerspectiveOrigin<string | number>;
        MozTextAlignLast?: import("csstype").Property.TextAlignLast;
        MozTextDecorationColor?: import("csstype").Property.TextDecorationColor;
        MozTextDecorationLine?: import("csstype").Property.TextDecorationLine;
        MozTextDecorationStyle?: import("csstype").Property.TextDecorationStyle;
        MozTransform?: import("csstype").Property.Transform;
        MozTransformOrigin?: import("csstype").Property.TransformOrigin<string | number>;
        MozTransformStyle?: import("csstype").Property.TransformStyle;
        MozTransition?: import("csstype").Property.Transition<string & {}>;
        MozTransitionDelay?: import("csstype").Property.TransitionDelay<string & {}>;
        MozTransitionDuration?: import("csstype").Property.TransitionDuration<string & {}>;
        MozTransitionProperty?: import("csstype").Property.TransitionProperty;
        MozTransitionTimingFunction?: import("csstype").Property.TransitionTimingFunction;
        MozUserInput?: import("csstype").Property.MozUserInput;
        msImeMode?: import("csstype").Property.ImeMode;
        OAnimation?: import("csstype").Property.Animation<string & {}>;
        OAnimationDelay?: import("csstype").Property.AnimationDelay<string & {}>;
        OAnimationDirection?: import("csstype").Property.AnimationDirection;
        OAnimationDuration?: import("csstype").Property.AnimationDuration<string & {}>;
        OAnimationFillMode?: import("csstype").Property.AnimationFillMode;
        OAnimationIterationCount?: import("csstype").Property.AnimationIterationCount;
        OAnimationName?: import("csstype").Property.AnimationName;
        OAnimationPlayState?: import("csstype").Property.AnimationPlayState;
        OAnimationTimingFunction?: import("csstype").Property.AnimationTimingFunction;
        OBackgroundSize?: import("csstype").Property.BackgroundSize<string | number>;
        OBorderImage?: import("csstype").Property.BorderImage;
        OObjectFit?: import("csstype").Property.ObjectFit;
        OObjectPosition?: import("csstype").Property.ObjectPosition<string | number>;
        OTabSize?: import("csstype").Property.TabSize<string | number>;
        OTextOverflow?: import("csstype").Property.TextOverflow;
        OTransform?: import("csstype").Property.Transform;
        OTransformOrigin?: import("csstype").Property.TransformOrigin<string | number>;
        OTransition?: import("csstype").Property.Transition<string & {}>;
        OTransitionDelay?: import("csstype").Property.TransitionDelay<string & {}>;
        OTransitionDuration?: import("csstype").Property.TransitionDuration<string & {}>;
        OTransitionProperty?: import("csstype").Property.TransitionProperty;
        OTransitionTimingFunction?: import("csstype").Property.TransitionTimingFunction;
        WebkitBoxAlign?: import("csstype").Property.BoxAlign;
        WebkitBoxDirection?: import("csstype").Property.BoxDirection;
        WebkitBoxFlex?: import("csstype").Property.BoxFlex;
        WebkitBoxFlexGroup?: import("csstype").Property.BoxFlexGroup;
        WebkitBoxLines?: import("csstype").Property.BoxLines;
        WebkitBoxOrdinalGroup?: import("csstype").Property.BoxOrdinalGroup;
        WebkitBoxOrient?: import("csstype").Property.BoxOrient;
        WebkitBoxPack?: import("csstype").Property.BoxPack;
        alignmentBaseline?: import("csstype").Property.AlignmentBaseline;
        baselineShift?: import("csstype").Property.BaselineShift<string | number>;
        clipRule?: import("csstype").Property.ClipRule;
        colorInterpolation?: import("csstype").Property.ColorInterpolation;
        colorRendering?: import("csstype").Property.ColorRendering;
        dominantBaseline?: import("csstype").Property.DominantBaseline;
        fill?: import("csstype").Property.Fill;
        fillOpacity?: import("csstype").Property.FillOpacity;
        fillRule?: import("csstype").Property.FillRule;
        floodColor?: import("csstype").Property.FloodColor;
        floodOpacity?: import("csstype").Property.FloodOpacity;
        glyphOrientationVertical?: import("csstype").Property.GlyphOrientationVertical;
        lightingColor?: import("csstype").Property.LightingColor;
        marker?: import("csstype").Property.Marker;
        markerEnd?: import("csstype").Property.MarkerEnd;
        markerMid?: import("csstype").Property.MarkerMid;
        markerStart?: import("csstype").Property.MarkerStart;
        shapeRendering?: import("csstype").Property.ShapeRendering;
        stopColor?: import("csstype").Property.StopColor;
        stopOpacity?: import("csstype").Property.StopOpacity;
        stroke?: import("csstype").Property.Stroke;
        strokeDasharray?: import("csstype").Property.StrokeDasharray<string | number>;
        strokeDashoffset?: import("csstype").Property.StrokeDashoffset<string | number>;
        strokeLinecap?: import("csstype").Property.StrokeLinecap;
        strokeLinejoin?: import("csstype").Property.StrokeLinejoin;
        strokeMiterlimit?: import("csstype").Property.StrokeMiterlimit;
        strokeOpacity?: import("csstype").Property.StrokeOpacity;
        strokeWidth?: import("csstype").Property.StrokeWidth<string | number>;
        textAnchor?: import("csstype").Property.TextAnchor;
        vectorEffect?: import("csstype").Property.VectorEffect;
    };
    defaultChecked?: boolean;
    defaultValue?: string | number | readonly string[];
    suppressContentEditableWarning?: boolean;
    suppressHydrationWarning?: boolean;
    accessKey?: string;
    autoFocus?: boolean;
    contentEditable?: "inherit" | (boolean | "false" | "true") | "plaintext-only";
    contextMenu?: string;
    dir?: string;
    draggable?: boolean | "false" | "true";
    hidden?: boolean;
    lang?: string;
    nonce?: string;
    slot?: string;
    spellCheck?: boolean | "false" | "true";
    tabIndex?: number;
    title?: string;
    translate?: "yes" | "no";
    radioGroup?: string;
    role?: React.AriaRole;
    about?: string;
    content?: string;
    datatype?: string;
    inlist?: any;
    prefix?: string;
    property?: string;
    rel?: string;
    resource?: string;
    rev?: string;
    typeof?: string;
    vocab?: string;
    autoCapitalize?: string;
    autoCorrect?: string;
    autoSave?: string;
    color?: string;
    itemProp?: string;
    itemScope?: boolean;
    itemType?: string;
    itemID?: string;
    itemRef?: string;
    results?: number;
    security?: string;
    unselectable?: "on" | "off";
    inputMode?: "none" | "text" | "search" | "tel" | "url" | "email" | "numeric" | "decimal";
    is?: string;
    "aria-activedescendant"?: string;
    "aria-atomic"?: boolean | "false" | "true";
    "aria-autocomplete"?: "both" | "none" | "inline" | "list";
    "aria-braillelabel"?: string;
    "aria-brailleroledescription"?: string;
    "aria-busy"?: boolean | "false" | "true";
    "aria-checked"?: boolean | "mixed" | "false" | "true";
    "aria-colcount"?: number;
    "aria-colindex"?: number;
    "aria-colindextext"?: string;
    "aria-colspan"?: number;
    "aria-controls"?: string;
    "aria-current"?: boolean | "page" | "false" | "true" | "time" | "step" | "location" | "date";
    "aria-describedby"?: string;
    "aria-description"?: string;
    "aria-details"?: string;
    "aria-disabled"?: boolean | "false" | "true";
    "aria-dropeffect"?: "none" | "copy" | "move" | "link" | "execute" | "popup";
    "aria-errormessage"?: string;
    "aria-expanded"?: boolean | "false" | "true";
    "aria-flowto"?: string;
    "aria-grabbed"?: boolean | "false" | "true";
    "aria-haspopup"?: boolean | "grid" | "listbox" | "menu" | "false" | "true" | "dialog" | "tree";
    "aria-hidden"?: boolean | "false" | "true";
    "aria-invalid"?: boolean | "false" | "true" | "grammar" | "spelling";
    "aria-keyshortcuts"?: string;
    "aria-label"?: string;
    "aria-labelledby"?: string;
    "aria-level"?: number;
    "aria-live"?: "off" | "assertive" | "polite";
    "aria-modal"?: boolean | "false" | "true";
    "aria-multiline"?: boolean | "false" | "true";
    "aria-multiselectable"?: boolean | "false" | "true";
    "aria-orientation"?: "horizontal" | "vertical";
    "aria-owns"?: string;
    "aria-placeholder"?: string;
    "aria-posinset"?: number;
    "aria-pressed"?: boolean | "mixed" | "false" | "true";
    "aria-readonly"?: boolean | "false" | "true";
    "aria-relevant"?: "all" | "text" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals";
    "aria-required"?: boolean | "false" | "true";
    "aria-roledescription"?: string;
    "aria-rowcount"?: number;
    "aria-rowindex"?: number;
    "aria-rowindextext"?: string;
    "aria-rowspan"?: number;
    "aria-selected"?: boolean | "false" | "true";
    "aria-setsize"?: number;
    "aria-sort"?: "none" | "ascending" | "descending" | "other";
    "aria-valuemax"?: number;
    "aria-valuemin"?: number;
    "aria-valuenow"?: number;
    "aria-valuetext"?: string;
    dangerouslySetInnerHTML?: {
        __html: string | TrustedHTML;
    };
    onCopy?: React.ClipboardEventHandler<HTMLElement>;
    onCopyCapture?: React.ClipboardEventHandler<HTMLElement>;
    onCut?: React.ClipboardEventHandler<HTMLElement>;
    onCutCapture?: React.ClipboardEventHandler<HTMLElement>;
    onPaste?: React.ClipboardEventHandler<HTMLElement>;
    onPasteCapture?: React.ClipboardEventHandler<HTMLElement>;
    onCompositionEnd?: React.CompositionEventHandler<HTMLElement>;
    onCompositionEndCapture?: React.CompositionEventHandler<HTMLElement>;
    onCompositionStart?: React.CompositionEventHandler<HTMLElement>;
    onCompositionStartCapture?: React.CompositionEventHandler<HTMLElement>;
    onCompositionUpdate?: React.CompositionEventHandler<HTMLElement>;
    onCompositionUpdateCapture?: React.CompositionEventHandler<HTMLElement>;
    onFocus?: React.FocusEventHandler<HTMLElement>;
    onFocusCapture?: React.FocusEventHandler<HTMLElement>;
    onBlur?: React.FocusEventHandler<HTMLElement>;
    onBlurCapture?: React.FocusEventHandler<HTMLElement>;
    onChange?: React.FormEventHandler<HTMLElement>;
    onChangeCapture?: React.FormEventHandler<HTMLElement>;
    onBeforeInput?: React.FormEventHandler<HTMLElement>;
    onBeforeInputCapture?: React.FormEventHandler<HTMLElement>;
    onInput?: React.FormEventHandler<HTMLElement>;
    onInputCapture?: React.FormEventHandler<HTMLElement>;
    onReset?: React.FormEventHandler<HTMLElement>;
    onResetCapture?: React.FormEventHandler<HTMLElement>;
    onSubmit?: React.FormEventHandler<HTMLElement>;
    onSubmitCapture?: React.FormEventHandler<HTMLElement>;
    onInvalid?: React.FormEventHandler<HTMLElement>;
    onInvalidCapture?: React.FormEventHandler<HTMLElement>;
    onLoad?: React.ReactEventHandler<HTMLElement>;
    onLoadCapture?: React.ReactEventHandler<HTMLElement>;
    onError?: React.ReactEventHandler<HTMLElement>;
    onErrorCapture?: React.ReactEventHandler<HTMLElement>;
    onKeyDown?: React.KeyboardEventHandler<HTMLElement>;
    onKeyDownCapture?: React.KeyboardEventHandler<HTMLElement>;
    onKeyPress?: React.KeyboardEventHandler<HTMLElement>;
    onKeyPressCapture?: React.KeyboardEventHandler<HTMLElement>;
    onKeyUp?: React.KeyboardEventHandler<HTMLElement>;
    onKeyUpCapture?: React.KeyboardEventHandler<HTMLElement>;
    onAbort?: React.ReactEventHandler<HTMLElement>;
    onAbortCapture?: React.ReactEventHandler<HTMLElement>;
    onCanPlay?: React.ReactEventHandler<HTMLElement>;
    onCanPlayCapture?: React.ReactEventHandler<HTMLElement>;
    onCanPlayThrough?: React.ReactEventHandler<HTMLElement>;
    onCanPlayThroughCapture?: React.ReactEventHandler<HTMLElement>;
    onDurationChange?: React.ReactEventHandler<HTMLElement>;
    onDurationChangeCapture?: React.ReactEventHandler<HTMLElement>;
    onEmptied?: React.ReactEventHandler<HTMLElement>;
    onEmptiedCapture?: React.ReactEventHandler<HTMLElement>;
    onEncrypted?: React.ReactEventHandler<HTMLElement>;
    onEncryptedCapture?: React.ReactEventHandler<HTMLElement>;
    onEnded?: React.ReactEventHandler<HTMLElement>;
    onEndedCapture?: React.ReactEventHandler<HTMLElement>;
    onLoadedData?: React.ReactEventHandler<HTMLElement>;
    onLoadedDataCapture?: React.ReactEventHandler<HTMLElement>;
    onLoadedMetadata?: React.ReactEventHandler<HTMLElement>;
    onLoadedMetadataCapture?: React.ReactEventHandler<HTMLElement>;
    onLoadStart?: React.ReactEventHandler<HTMLElement>;
    onLoadStartCapture?: React.ReactEventHandler<HTMLElement>;
    onPause?: React.ReactEventHandler<HTMLElement>;
    onPauseCapture?: React.ReactEventHandler<HTMLElement>;
    onPlay?: React.ReactEventHandler<HTMLElement>;
    onPlayCapture?: React.ReactEventHandler<HTMLElement>;
    onPlaying?: React.ReactEventHandler<HTMLElement>;
    onPlayingCapture?: React.ReactEventHandler<HTMLElement>;
    onProgress?: React.ReactEventHandler<HTMLElement>;
    onProgressCapture?: React.ReactEventHandler<HTMLElement>;
    onRateChange?: React.ReactEventHandler<HTMLElement>;
    onRateChangeCapture?: React.ReactEventHandler<HTMLElement>;
    onResize?: React.ReactEventHandler<HTMLElement>;
    onResizeCapture?: React.ReactEventHandler<HTMLElement>;
    onSeeked?: React.ReactEventHandler<HTMLElement>;
    onSeekedCapture?: React.ReactEventHandler<HTMLElement>;
    onSeeking?: React.ReactEventHandler<HTMLElement>;
    onSeekingCapture?: React.ReactEventHandler<HTMLElement>;
    onStalled?: React.ReactEventHandler<HTMLElement>;
    onStalledCapture?: React.ReactEventHandler<HTMLElement>;
    onSuspend?: React.ReactEventHandler<HTMLElement>;
    onSuspendCapture?: React.ReactEventHandler<HTMLElement>;
    onTimeUpdate?: React.ReactEventHandler<HTMLElement>;
    onTimeUpdateCapture?: React.ReactEventHandler<HTMLElement>;
    onVolumeChange?: React.ReactEventHandler<HTMLElement>;
    onVolumeChangeCapture?: React.ReactEventHandler<HTMLElement>;
    onWaiting?: React.ReactEventHandler<HTMLElement>;
    onWaitingCapture?: React.ReactEventHandler<HTMLElement>;
    onAuxClick?: React.MouseEventHandler<HTMLElement>;
    onAuxClickCapture?: React.MouseEventHandler<HTMLElement>;
    onClick?: React.MouseEventHandler<HTMLElement>;
    onClickCapture?: React.MouseEventHandler<HTMLElement>;
    onContextMenu?: React.MouseEventHandler<HTMLElement>;
    onContextMenuCapture?: React.MouseEventHandler<HTMLElement>;
    onDoubleClick?: React.MouseEventHandler<HTMLElement>;
    onDoubleClickCapture?: React.MouseEventHandler<HTMLElement>;
    onDrag?: React.DragEventHandler<HTMLElement>;
    onDragCapture?: React.DragEventHandler<HTMLElement>;
    onDragEnd?: React.DragEventHandler<HTMLElement>;
    onDragEndCapture?: React.DragEventHandler<HTMLElement>;
    onDragEnter?: React.DragEventHandler<HTMLElement>;
    onDragEnterCapture?: React.DragEventHandler<HTMLElement>;
    onDragExit?: React.DragEventHandler<HTMLElement>;
    onDragExitCapture?: React.DragEventHandler<HTMLElement>;
    onDragLeave?: React.DragEventHandler<HTMLElement>;
    onDragLeaveCapture?: React.DragEventHandler<HTMLElement>;
    onDragOver?: React.DragEventHandler<HTMLElement>;
    onDragOverCapture?: React.DragEventHandler<HTMLElement>;
    onDragStart?: React.DragEventHandler<HTMLElement>;
    onDragStartCapture?: React.DragEventHandler<HTMLElement>;
    onDrop?: React.DragEventHandler<HTMLElement>;
    onDropCapture?: React.DragEventHandler<HTMLElement>;
    onMouseDown?: React.MouseEventHandler<HTMLElement>;
    onMouseDownCapture?: React.MouseEventHandler<HTMLElement>;
    onMouseEnter?: React.MouseEventHandler<HTMLElement>;
    onMouseLeave?: React.MouseEventHandler<HTMLElement>;
    onMouseMove?: React.MouseEventHandler<HTMLElement>;
    onMouseMoveCapture?: React.MouseEventHandler<HTMLElement>;
    onMouseOut?: React.MouseEventHandler<HTMLElement>;
    onMouseOutCapture?: React.MouseEventHandler<HTMLElement>;
    onMouseOver?: React.MouseEventHandler<HTMLElement>;
    onMouseOverCapture?: React.MouseEventHandler<HTMLElement>;
    onMouseUp?: React.MouseEventHandler<HTMLElement>;
    onMouseUpCapture?: React.MouseEventHandler<HTMLElement>;
    onSelect?: React.ReactEventHandler<HTMLElement>;
    onSelectCapture?: React.ReactEventHandler<HTMLElement>;
    onTouchCancel?: React.TouchEventHandler<HTMLElement>;
    onTouchCancelCapture?: React.TouchEventHandler<HTMLElement>;
    onTouchEnd?: React.TouchEventHandler<HTMLElement>;
    onTouchEndCapture?: React.TouchEventHandler<HTMLElement>;
    onTouchMove?: React.TouchEventHandler<HTMLElement>;
    onTouchMoveCapture?: React.TouchEventHandler<HTMLElement>;
    onTouchStart?: React.TouchEventHandler<HTMLElement>;
    onTouchStartCapture?: React.TouchEventHandler<HTMLElement>;
    onPointerDown?: React.PointerEventHandler<HTMLElement>;
    onPointerDownCapture?: React.PointerEventHandler<HTMLElement>;
    onPointerMove?: React.PointerEventHandler<HTMLElement>;
    onPointerMoveCapture?: React.PointerEventHandler<HTMLElement>;
    onPointerUp?: React.PointerEventHandler<HTMLElement>;
    onPointerUpCapture?: React.PointerEventHandler<HTMLElement>;
    onPointerCancel?: React.PointerEventHandler<HTMLElement>;
    onPointerCancelCapture?: React.PointerEventHandler<HTMLElement>;
    onPointerEnter?: React.PointerEventHandler<HTMLElement>;
    onPointerLeave?: React.PointerEventHandler<HTMLElement>;
    onPointerOver?: React.PointerEventHandler<HTMLElement>;
    onPointerOverCapture?: React.PointerEventHandler<HTMLElement>;
    onPointerOut?: React.PointerEventHandler<HTMLElement>;
    onPointerOutCapture?: React.PointerEventHandler<HTMLElement>;
    onGotPointerCapture?: React.PointerEventHandler<HTMLElement>;
    onGotPointerCaptureCapture?: React.PointerEventHandler<HTMLElement>;
    onLostPointerCapture?: React.PointerEventHandler<HTMLElement>;
    onLostPointerCaptureCapture?: React.PointerEventHandler<HTMLElement>;
    onScroll?: React.UIEventHandler<HTMLElement>;
    onScrollCapture?: React.UIEventHandler<HTMLElement>;
    onWheel?: React.WheelEventHandler<HTMLElement>;
    onWheelCapture?: React.WheelEventHandler<HTMLElement>;
    onAnimationStart?: React.AnimationEventHandler<HTMLElement>;
    onAnimationStartCapture?: React.AnimationEventHandler<HTMLElement>;
    onAnimationEnd?: React.AnimationEventHandler<HTMLElement>;
    onAnimationEndCapture?: React.AnimationEventHandler<HTMLElement>;
    onAnimationIteration?: React.AnimationEventHandler<HTMLElement>;
    onAnimationIterationCapture?: React.AnimationEventHandler<HTMLElement>;
    onTransitionEnd?: React.TransitionEventHandler<HTMLElement>;
    onTransitionEndCapture?: React.TransitionEventHandler<HTMLElement>;
}, HTMLElement>;
export type { PropsType as HStackProps };
export default HStack;
