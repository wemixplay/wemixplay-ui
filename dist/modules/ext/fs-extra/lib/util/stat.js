"use strict";var t=require("../../../../_virtual/index2.js");require("../../../universalify/index.js");var r=require("../../../../_virtual/index.js");require("../fs/index.js");var e=require("path");const n=r.__exports,i=e,o=t.__exports.fromPromise;function s(t,r){return r.ino&&r.dev&&r.ino===t.ino&&r.dev===t.dev}function a(t,r){const e=i.resolve(t).split(i.sep).filter((t=>t)),n=i.resolve(r).split(i.sep).filter((t=>t));return e.every(((t,r)=>n[r]===t))}function c(t,r,e){return`Cannot ${e} '${t}' to a subdirectory of itself, '${r}'.`}var u={checkPaths:o((async function(t,r,e,o){const{srcStat:u,destStat:d}=await function(t,r,e){const i=e.dereference?t=>n.stat(t,{bigint:!0}):t=>n.lstat(t,{bigint:!0});return Promise.all([i(t),i(r).catch((t=>{if("ENOENT"===t.code)return null;throw t}))]).then((([t,r])=>({srcStat:t,destStat:r})))}(t,r,o);if(d){if(s(u,d)){const n=i.basename(t),o=i.basename(r);if("move"===e&&n!==o&&n.toLowerCase()===o.toLowerCase())return{srcStat:u,destStat:d,isChangingCase:!0};throw new Error("Source and destination must not be the same.")}if(u.isDirectory()&&!d.isDirectory())throw new Error(`Cannot overwrite non-directory '${r}' with directory '${t}'.`);if(!u.isDirectory()&&d.isDirectory())throw new Error(`Cannot overwrite directory '${r}' with non-directory '${t}'.`)}if(u.isDirectory()&&a(t,r))throw new Error(c(t,r,e));return{srcStat:u,destStat:d}})),checkPathsSync:function(t,r,e,o){const{srcStat:u,destStat:d}=function(t,r,e){let i;const o=e.dereference?t=>n.statSync(t,{bigint:!0}):t=>n.lstatSync(t,{bigint:!0}),s=o(t);try{i=o(r)}catch(t){if("ENOENT"===t.code)return{srcStat:s,destStat:null};throw t}return{srcStat:s,destStat:i}}(t,r,o);if(d){if(s(u,d)){const n=i.basename(t),o=i.basename(r);if("move"===e&&n!==o&&n.toLowerCase()===o.toLowerCase())return{srcStat:u,destStat:d,isChangingCase:!0};throw new Error("Source and destination must not be the same.")}if(u.isDirectory()&&!d.isDirectory())throw new Error(`Cannot overwrite non-directory '${r}' with directory '${t}'.`);if(!u.isDirectory()&&d.isDirectory())throw new Error(`Cannot overwrite directory '${r}' with non-directory '${t}'.`)}if(u.isDirectory()&&a(t,r))throw new Error(c(t,r,e));return{srcStat:u,destStat:d}},checkParentPaths:o((async function t(r,e,o,a){const u=i.resolve(i.dirname(r)),d=i.resolve(i.dirname(o));if(d===u||d===i.parse(d).root)return;let f;try{f=await n.stat(d,{bigint:!0})}catch(t){if("ENOENT"===t.code)return;throw t}if(s(e,f))throw new Error(c(r,o,a));return t(r,e,d,a)})),checkParentPathsSync:function t(r,e,o,a){const u=i.resolve(i.dirname(r)),d=i.resolve(i.dirname(o));if(d===u||d===i.parse(d).root)return;let f;try{f=n.statSync(d,{bigint:!0})}catch(t){if("ENOENT"===t.code)return;throw t}if(s(e,f))throw new Error(c(r,o,a));return t(r,e,d,a)},isSrcSubdir:a,areIdentical:s};exports.stat=u;
